-- по умолчанию база master
USE master
GO

-- создание FT индекса с оптимизацией (на другом диске)
-- добавляем отдельную файловую группу для размещения полнотекстового индекса для базы patstat2016a
ALTER DATABASE patstat2016a ADD FILEGROUP FT_FILEGROUP
GO

-- добавляем файл для размещения полнотекстового индекса на другом диске по отношению к основной файловой группе базы patstat2016a
-- файл автоматически увеличивается
-- у меня финальный размер получился порядка 17 гигабайт
ALTER DATABASE patstat2016a 
	ADD FILE (NAME = N'patstat2016a_ft', 
				FILENAME = N'E:\MSSQL\FT\patstat2016a_ft.mdf', -- здесь нужно указать каталог на другом диске по отношению к диску, на котором лежит основная база patstat2016a
				SIZE = 5120KB, 
				FILEGROWTH = 1024KB) 
	TO FILEGROUP FT_FILEGROUP
GO

-- работаем с базой patstat2016a
USE patstat2016a
GO

-- создаем полнотекстовый каталог на файловой группе FT_FILEGROUP
-- ACCENT_SENSITIVITY: индекс не будет учитывать диакритические знаки
CREATE FULLTEXT CATALOG abstr_ft 
	ON FILEGROUP FT_FILEGROUP
	WITH ACCENT_SENSITIVITY = OFF
	AS DEFAULT
GO

-- создаем полнотекстовый индекс на таблице tls203_appln_abstr для поля appln_abstract
-- ключом используем кластерный индекс по первичному ключу
-- STOPLIST: стоплист системный
-- CHANGE_TRACKING: отслеживание изменений выключено (таблица не изменяется)
-- NO POPULATION: наполнение индекса сразу при создании не производим
CREATE FULLTEXT INDEX ON tls203_appln_abstr.appln_abstract
  KEY INDEX PK__tls203_a__D7B38CD4DC64B0B6
  ON abstr_ft
  WITH STOPLIST = SYSTEM, CHANGE_TRACKING OFF, NO POPULATION;
GO

-- стартуем процесс наполнения созданного полнотекстового индекса
ALTER FULLTEXT INDEX ON tls203_appln_abstr 
   START FULL POPULATION;
GO

-- проверка статуса процесса наполнения FT индекса
-- запрос показывает дату последнего обновления индекса и состояние процесса наполнения
-- необходимо дождаться состояния Idle (в зависимости от мощности сервера от получаса до пары часов)
DECLARE @CatalogName VARCHAR(MAX)
SET     @CatalogName = 'abstr_ft'
SELECT
    DATEADD(ss, FULLTEXTCATALOGPROPERTY(@CatalogName,'PopulateCompletionAge'), '1/1/1990') AS LastPopulated
    ,(SELECT CASE FULLTEXTCATALOGPROPERTY(@CatalogName,'PopulateStatus')
        WHEN 0 THEN 'Idle'
        WHEN 1 THEN 'Full Population In Progress'
        WHEN 2 THEN 'Paused'
        WHEN 3 THEN 'Throttled'
        WHEN 4 THEN 'Recovering'
        WHEN 5 THEN 'Shutdown'
        WHEN 6 THEN 'Incremental Population In Progress'
        WHEN 7 THEN 'Building Index'
        WHEN 8 THEN 'Disk Full.  Paused'
        WHEN 9 THEN 'Change Tracking' END) AS PopulateStatus;

-- другой вариант получения статуса процесса наполнения FT индекса
--SELECT OBJECTPROPERTY(object_id('tls203_appln_abstr'), 'TableFulltextPopulateStatus')

-- полная статистика по наполнению полнотекстовых индексов 
-- описание полей здесь (https://msdn.microsoft.com/en-us/library/ms186897(v=sql.110).aspx)
select * from sys.dm_fts_index_population;
GO

-- статистика термов в FT индексе
-- запрос сортирует термы в порядке убывания по частоте
-- можно использовать для проверки скорости выполнения запросов по высокочастотным термам
-- например, очень высокочастотный терм - 'compatible'
SELECT display_term, count(*)
FROM sys.dm_fts_index_keywords_by_document(db_id('patstat2016a'), object_id('tls203_appln_abstr'))
group by display_term
order by count(*) desc; 

-- переключаемся на базу patstat2016a
USE patstat2016a
GO

-- создание "тонкой" таблицы
-- данные (идентификатор документа, год публикации и страна публикации) 
-- берём из таблицы tls211_pat_publn и создаём таблицу appln_search
select appln_id, YEAR(publn_date) publn_year, publn_auth
 into appln_search 
from tls211_pat_publn
GO

-- создаем уникальный кластерный индекс на appln_search по всем полям 
-- (для оптимизации чтения всех полей в запросах)
-- PAD_INDEX: fillfactor применяется к страницам индекса промежуточного уровня
-- STATISTICS_NORECOMPUTE: устаревшие статистики распределения не пересчитываются автоматически
-- SORT_IN_TEMPDB: временные результаты сортировки не сохраняются в базе данных tempdb
-- IGNORE_DUP_KEY: ошибка на повторяющиеся значения ключа выключена
-- DROP_EXISTING: индекс с указанным именем ещё не существует
-- ONLINE: во время создания индекса таблица не доступна
-- ALLOW_ROW_LOCKS: блокировки записей не используются (таблица не будет обновляться)
-- ALLOW_PAGE_LOCKS: блокировки страниц не используются (таблица не будет обновляться)
-- FILLFACTOR: таблица не будет обновляться, коэффициент заполнения для отсутствия резервирования
-- PRIMARY: индекс создаётся на первичной файловой группе
CREATE UNIQUE CLUSTERED INDEX ndx_appln_search ON appln_search
(
  appln_id ASC,
  publn_year ASC,
  publn_auth ASC
)
WITH (PAD_INDEX = ON, STATISTICS_NORECOMPUTE = ON, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, 
  DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = OFF, ALLOW_PAGE_LOCKS = OFF, FILLFACTOR = 100) 
ON [PRIMARY]
GO

-- обновляем статистику оптимизации запросов для таблицы
UPDATE STATISTICS appln_search;
GO

-- тестирование скорости исполнения запросов
-- нужен небольшой прогрев - несколько раз запустить разные запросы для кеширования в памяти

-- статистика распределения документов с требуемыми термами по годам
-- используется функция CONTAINSTABLE с соединением с "тонкой" таблицей по ключу полнотекстового индекса
select publn_year, count(*)
from CONTAINSTABLE(tls203_appln_abstr, appln_abstract, 'laser') ab
inner 
-- loop -- хинт, с ним у меня самые быстрые запросы получались (альтернатива hash, merge), можно его включить 
join appln_search ayc
on ayc.appln_id = ab.[KEY]
group by publn_year
order by count(*) desc;

-- статистика распределения документов с требуемыми термами по годам и странам
select publn_year, publn_auth, count(*)
from CONTAINSTABLE(tls203_appln_abstr, appln_abstract, 'laser') ab
inner 
-- loop
join appln_search ayc
on ayc.appln_id = ab.[KEY]
group by publn_year, publn_auth
order by count(*) desc;

-- статистика распределения документов с требуемыми термами по странам с фильтром по годам
select publn_auth, count(*)
from CONTAINSTABLE(tls203_appln_abstr, appln_abstract, 'laser') ab
inner 
-- loop
join appln_search ayc
on ayc.appln_id = ab.[KEY]
where publn_year in ('2011', '1996', '2006')
group by publn_auth
order by count(*) desc;
